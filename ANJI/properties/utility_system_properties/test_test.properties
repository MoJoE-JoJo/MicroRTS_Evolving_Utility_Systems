#random.seed=0
# Test_test: property file for running random tests, and testing property file functionality
run.name=test_test
run.reset=true

###########
# utility system & own custom properties
###########

# must always be true when we are making a utility system DONT CHANGE!!
utility.system.build = true

# path to a baseline utility system in chromosome xml format. leave empty "" or commented out if not using a baseline.
utility.system.baseline = baselineChromosome.xml

# if TRUE the build utility systems always takes the max action, if FALSE it takes a weighted random action instead
utility.system.take.max.action = true

# amount of games to run pr chromosome fitness calculation.
fitness.game.iterations = 9

# can be the following types:
# - HARVEST (wins when 'goal' amount of resources has been gathered)
# - MILITIA_UNITS (wins when 'goal' amount of warriors has been build)
# - NORMAL (normal games where the objective is to destroy all the enemy units)
fitness.game.type = NORMAL

# the value we use for deciding if a game is done, based on the game type.
# example if harvest and goal is 10, the game end when the AI reaches 10 resources.
# means nothing if gamemode is sat to normal.
fitness.game.goal = 15

# can be the following types:
# - PASSIVE (a AI that does nothing)
# - COEVOLUTION (plays against the champion of the previous generation)
# - ROUND_ROBIN (plays against all rush/defense AIs in microRTS) fitness.iterations should be a multiplicative of 8
# - BASELINE (plays against our handcrafted utility system)
# - ROUND_ROBIN_AND_BASELINE (plays rush/defense AIs + the baseline) fitness.iterations should be a multiplicative of 9
# - COEVOLUTION_AND_ROUND_ROBIN (plays rush/defense AIs + the champ of prevoius generation) fitness.iterations should be a multiplicative of 9
fitness.game.opponent = ROUND_ROBIN_AND_BASELINE
# what opponent type to evaluate against: Cant be COEVOLUTION or COEVOLUTION_AND_ROUND_ROBIN
fitness.game.opponent.evaluate = BASELINE

# what map the game is going to be played on
fitness.game.map = maps/16x16/basesWorkers16x16.xml
#fitness.game.map = maps/chambers32x32.xml

# max amount of game cycles the game can span
fitness.game.cycles.max = 5000

# max amount of inactive game cycles - usually the same as the max game cycles
fitness.game.cycles.inactive.max = 5000

###########
# evolution
###########
# number of generations
num.generations=2
popul.size=100
topology.mutation.classic=true
# max value is 0.5
add.connection.mutation.rate=0.5
# max value is 0.5
add.neuron.mutation.rate=0.5
# max value is 0.3
remove.connection.mutation.rate=0.2
remove.connection.max.weight=100
# all, skewed, small
remove.connection.strategy=all
prune.mutation.rate=1.00
weight.mutation.rate=0.50
weight.mutation.std.dev=1.5
weight.max=10.0
weight.min=-10.0
survival.rate=0.2
selector.elitism=true
selector.roulette=false
selector.elitism.min.specie.size=1

############
# speciation
############
chrom.compat.excess.coeff=1.0
chrom.compat.disjoint.coeff=1.0
chrom.compat.common.coeff=0.4
speciation.threshold=0.8

##################
# fitness function
##################
fitness_function.class=com.anji.microRTS.microRTSFitnessFunction
# The amount of variables + 1
stimulus.size=21
# The amount of actions
response.size=9
fitness.target=9999999
fitness.threshold=9999999

##############
# network arch
##############
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
recurrent=disallowed
recurrent.cycles=0
ann.type=anji

#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.all=false
persist.last=true
persist.champions=true
id.file=./db/id.xml
neat.id.file=./db/neatid.xml
presentation.dir=./nevt

#########
# logging
#########
log4j.rootLogger=INFO, A1
log4j.appender.A1=org.apache.log4j.ConsoleAppender
#log4j.appender.A1=org.apache.log4j.FileAppender
#log4j.appender.A1=org.apache.log4j.RollingFileAppender
#log4j.appender.A1.File=./db/log.txt
#log4j.appender.A1.MaxFileSize=10MB
#log4j.appender.A1.MaxBackupIndex=20
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
#log4j.appender.A1.layout.ConversionPattern=%-4r %-5p  %m - [%t] %c %x%n
log4j.appender.A1.layout.ConversionPattern=%-5p %m%x%n
